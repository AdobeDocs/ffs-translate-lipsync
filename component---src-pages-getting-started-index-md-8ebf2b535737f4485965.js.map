{"version":3,"file":"component---src-pages-getting-started-index-md-8ebf2b535737f4485965.js","mappings":"yTAOaA,EAAe,CAAC,EAKvBC,GAJgBC,EAIY,cAJJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,GAHsBD,MAKtB,MAAMK,EAAc,CAClBP,gBAEIQ,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIR,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,KAACE,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBJ,EAAK,CAAES,WAAYA,EAAYI,QAAQ,eAI5EV,EAAAA,EAAAA,KAAA,MACE,GAAM,kBACJ,mBACJA,EAAAA,EAAAA,KAAA,SAAI,6LAA4LA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC1M,KAAQ,0FACN,oBAAwB,MAC9BX,EAAAA,EAAAA,KAAA,MACE,GAAM,iBACJ,kBACJA,EAAAA,EAAAA,KAACL,EAAW,CAACiB,QAAQ,UAAUC,MAAM,eAAeH,QAAQ,iBAC5DV,EAAAA,EAAAA,KAAA,SAAI,0CACJA,EAAAA,EAAAA,KAAA,SAAI,iPACJA,EAAAA,EAAAA,KAAA,SAAI,gIACJA,EAAAA,EAAAA,KAAA,SAAI,iEAAgEA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,QAAqB,wCACrHX,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,iBACX,+PAINX,EAAAA,EAAAA,KAAA,SAAI,iCACJA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIW,WAAW,OAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,MAAM,aAA0B,qBAC3EX,EAAAA,EAAAA,KAAA,MAAIW,WAAW,OAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,MAAM,iBAA8B,yBAC/EX,EAAAA,EAAAA,KAAA,MAAIW,WAAW,OAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,MAAM,SAAsB,qBAAoBX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,MAAM,UAAuB,MAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,MAAM,WAAwB,MAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,MAAM,eAA4B,MAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,MAAM,WAAwB,OAEnUX,EAAAA,EAAAA,KAAA,SAAI,kHACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,mBACJ,oBACJA,EAAAA,EAAAA,KAAA,SAAI,iMACJA,EAAAA,EAAAA,KAAA,SAAI,+PAGR,CAEAI,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/getting_started/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/ffs-translate-lipsync/ffs-translate-lipsync/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport \"../../styles/main.css\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"authentication\"\n    }}>{`Authentication`}</h1>\n    <p>{`Server-to-server authentication credentials allow your application's server to generate access tokens and make API calls on behalf of your application. This is sometimes referred to as `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.ibm.com/docs/en/datapower-gateway/10.5.x?topic=flows-two-legged-oauth-flow\"\n      }}>{`two-legged OAuth`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"access-tokens\"\n    }}>{`Access tokens`}</h2>\n    <InlineAlert variant=\"warning\" slots=\"header, text\" mdxType=\"InlineAlert\" />\n    <p>{`Tokens for TLS need additional scopes`}</p>\n    <p>{`TLS tokens can be generated but MAY NOT BE VALID without two cards included on your developer console project. To authenticate the TLS API, add another API from the Firefly services family to your project on the Adobe developer console.`}</p>\n    <p>{`Each access token is valid for 24 hours. To adhere to OAuth best practices, you should generate a new token every 23 hours.`}</p>\n    <p>{`Access tokens can be generated programmatically by sending a `}<inlineCode parentName=\"p\">{`POST`}</inlineCode>{` request to the following endpoint:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl -X POST 'https://ims-na1.adobelogin.com/ims/token/v3' \\\\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\\\n-d 'grant_type=client_credentials&client_id={client_id}&client_secret={client_secret}&scope=openid,AdobeID,firefly_api,ff_apis'\n`}</code></pre>\n    <p>{`The required parameters are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`client_id`}</inlineCode>{`: The client ID.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`client_secret`}</inlineCode>{`: The client secret.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`scope`}</inlineCode>{`: The scopes are `}<inlineCode parentName=\"li\">{`openid`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`AdobeID`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`firefly_api`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`ff_apis`}</inlineCode>{`.`}</li>\n    </ul>\n    <p>{`The token endpoint also returns an expiry date, and the token itself (when decoded) contains the expiry time.`}</p>\n    <h3 {...{\n      \"id\": \"automate-tokens\"\n    }}>{`Automate tokens`}</h3>\n    <p>{`Automate your token generation by calling the IMS endpoint using standard OAuth2 libraries. Using industry-standard libraries is the quickest and most secure way of integrating with OAuth.`}</p>\n    <p>{`Be diligent when picking the OAuth 2.0 library that works best for their application. Your team's projects are likely leveraging OAuth libraries already to connect with other APIs. Use these libraries to automatically generate tokens when they expire.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}